//first codde
/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include<iostream>
#include "stm32.h"
//when pb7 is switched led blinks with more delay and pb3 is pressed led blinks faster with less delay

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

uint8_t currentstate[2]={0,0};//declaring the  current state
uint8_t previouststate[2]={0,0};
uint16_t count=0;
void delay_ms(uint16_t);
void led_config(void);
void switch_config(void);
void check_rightswitch(void);
void check_leftswitch(void);




int main(void)
{
	led_config();
	switch_config();

    /* Loop forever */

	for(;;){
		check_rightswitch();
		check_leftswitch();
		GPIOB_ODR ^=(1<<13);
		delay_ms(count);

	}
}
void led_config()
{
	    AHB1ENR|=(1<<1);//enable clock to GPIOB,GPIOA
		 GPIOB_MODER|=(1<<26);
		 GPIOB_OTYPER &=~(1<<13);
		 GPIOB_OSPEEDR|=(1<<26);
		 GPIOB_ODR|=(1<<13);

}
void switch_config()
{
	      AHB1ENR|=(1<<1);

		 GPIOB_MODER &=~(3<<14);//pb7 switch
		 GPIOB_MODER &=~(3<<6);//pb3 switch
}
void delay_ms(uint16_t delay)
 {
 	for(uint16_t i=0;i<delay;i++)
 	{
 		for(uint32_t x=0;x<16000;x++);
 	}
 }
void check_rightswitch()
 {
	 currentstate[0]=GPIOB_IDR &(1<<7);
	 delay_ms(1);
	 currentstate[0]=GPIOB_IDR &(1<<7);
	 if(currentstate[0]!=previouststate[0])
	 {
		 if(!(currentstate[0]))
		 {
			if(count<10000)
			{
				count=count+10;
			}
		 }
		 previouststate[0]=currentstate[0];
	 }
 }

void check_leftswitch()
   {
  	 currentstate[1]=GPIOB_IDR &(1<<3);
  	 delay_ms(1);
  	 currentstate[1]=GPIOB_IDR &(1<<3);
  	 if(currentstate[1]!=previouststate[1])
  	 {
  		 if(!(currentstate[1]))
  		 {
  			 if(count>0)
  			 {
  				 count=count-10;
  			 }
  		 }
  		previouststate[1]=currentstate[1];
  	 }
   }


//stm32.h file

#ifndef STM32_H_
#define STM32_H_

#define RCC 0x40023800 //base address of RCC
#define GPIOB 0X40020400  //base address of GPIOB
#define GPIOC 0x40020800  //base address of GPIOC

#define AHB1ENR *(volatile uint32_t*)(RCC+0x30)  //address of AHB1 Clock enable

#define GPIOB_MODER *(volatile uint32_t*)(GPIOB+0x00) //GPIOB Output type register
#define GPIOB_OTYPER *(volatile uint32_t*)(GPIOB+0x04) // GPIOB Output type register
#define GPIOB_OSPEEDR *(volatile uint32_t*)(GPIOB+0x08) // GPIOB Output speed register
#define GPIOB_ODR *(volatile uint32_t*)(GPIOB+0x14) // GPIOB output data register
#define GPIOB_IDR *(volatile uint32_t*)(GPIOB+0x10)//GPIOB Input data register


#define GPIOC_MODER *(volatile uint32_t*)(GPIOC+0x00)//GPIOC Output type register
#define GPIOC_OTYPER *(volatile uint32_t*)(GPIOC+0x04) //GPIOC output type register
#define GPIOC_OSPEEDR *(volatile uint32_t*)(GPIOC+0x08) //GPIOC Output speed register
#define GPIOC_ODR *(volatile uint32_t*)(GPIOC+0x14) //GPIOC output data register











